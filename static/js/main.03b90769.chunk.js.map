{"version":3,"sources":["components/Sidebar/MenuItem.js","components/Sidebar/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["MenuItem","active","icon","title","setExpanded","setselectedItem","Icon","console","log","className","onClick","event","target","textContent","fill","opacity","Sidebar","useState","expanded","selectedItem","isMobile","window","innerWidth","toggleMenu","FaHome","FaSearch","BsPeopleCircle","App","exact","path","Boolean","location","hostname","match","rootComponent","basename","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TA2BeA,EAxBE,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,OAAQC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,gBAM9CC,EAAOJ,EAGb,OADAK,QAAQC,IAAIP,EAAQE,GAElB,yBAAKM,UAAS,mBAAcR,GAAU,4BAA8BS,QAThD,SAACC,GAErB,OADAP,GAAY,GACLC,EAAgBM,EAAMC,OAAOC,eAQjCZ,GAAU,yBAAKQ,UAAU,uBAC1B,kBAACH,EAAD,CAAMQ,KAAMb,EAAS,UAAY,GAAIc,QAAUd,EAAiB,IAAR,QACxD,0BAAMQ,UAAS,yBAAoBR,GAAU,yBAA2BE,KCsD/Da,EA5DC,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACbC,EADa,KACHd,EADG,OAEoBa,mBAAS,WAF7B,mBAEbE,EAFa,KAECd,EAFD,KAIde,EAAW,kBAAMC,OAAOC,YAAc,KAEtCC,EAAa,kBAAMnB,GAAac,IAQtC,OACE,yBAAKT,UAAU,WACb,yBAAKA,UAAU,8BAEXW,IAAaF,GATZ,yBAAKR,QAASa,EAAYd,UAAU,kBACzC,kBAAC,IAAD,OAUE,yBAAKA,UAAS,4BAAuBS,EAAW,eAAiB,iBAI/D,yBAAKT,UAAU,oBAEb,kBAAC,EAAD,CACEL,YAAaA,EACbC,gBAAiBA,EACjBF,MAAM,UACND,KAAMsB,IACNvB,OAAyB,YAAjBkB,IAGV,kBAAC,EAAD,CACEf,YAAaA,EACbC,gBAAiBA,EACjBF,MAAM,aACND,KAAMuB,IACNxB,OAAyB,eAAjBkB,IAGV,kBAAC,EAAD,CACEf,YAAaA,EACbC,gBAAiBA,EACjBF,MAAM,iBACND,KAAMwB,IACNzB,OAAyB,mBAAjBkB,MAMbC,GAAYF,GAAY,yBAAKT,UAAU,oBAAoBC,QAASa,OC1C9DI,EAZH,WACV,OACE,yBAAKlB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,UCFUC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2D,YCTAC,EACJ,kBAAC,IAAD,CAAQC,SAAS,cACf,kBAAC,EAAD,OAKJC,iBAAOF,EAAeG,SAASC,eAAe,SDmHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.03b90769.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MenuItem = ({ active, icon, title, setExpanded, setselectedItem }) => {\r\n  const onItemClicked = (event) => {\r\n    setExpanded(false);\r\n    return setselectedItem(event.target.textContent);\r\n  }\r\n\r\n  const Icon = icon;\r\n\r\n  console.log(active, title);\r\n  return (\r\n    <div className={`menuItem ${active && 'menuItem-activeContainer'}`} onClick={onItemClicked}>\r\n      {active && <div className=\"menuItem-activeBar\"></div>}\r\n      <Icon fill={active ? '#dde2ff' : ''} opacity={!active ? '0.4' : '1'} />\r\n      <span className={`menuItem-title ${active && 'menuItem-activeTitle'}`}>{title}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nMenuItem.propTypes = {\r\n  active: PropTypes.bool.isRequired,\r\n  icon: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default MenuItem;","import React, { useState } from 'react';\r\nimport './Sidebar.scss';\r\nimport { GiHamburgerMenu } from 'react-icons/gi';\r\nimport { BsPeopleCircle } from 'react-icons/bs'\r\nimport { FaHome, FaSearch } from 'react-icons/fa';\r\n\r\nimport MenuItem from './MenuItem';\r\n\r\n\r\n\r\nconst Sidebar = () => {\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [selectedItem, setselectedItem] = useState('Accueil');\r\n\r\n  const isMobile = () => window.innerWidth <= 768;\r\n\r\n  const toggleMenu = () => setExpanded(!expanded);\r\n\r\n  const renderBurger = () => {\r\n    return <div onClick={toggleMenu} className=\"sidebar-burger\">\r\n      <GiHamburgerMenu />\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"_row sidebar-mainContainer\">\r\n\r\n        {(isMobile && !expanded) && renderBurger()}\r\n\r\n        <div className={`sidebar-container ${expanded ? 'sidebar-show' : 'sidebar-hide'}`}>\r\n\r\n          {/* LOGO */}\r\n\r\n          <div className=\"sidebar-menuList\">\r\n\r\n            <MenuItem\r\n              setExpanded={setExpanded}\r\n              setselectedItem={setselectedItem}\r\n              title=\"Accueil\"\r\n              icon={FaHome}\r\n              active={selectedItem === 'Accueil'}\r\n            />\r\n\r\n            <MenuItem\r\n              setExpanded={setExpanded}\r\n              setselectedItem={setselectedItem}\r\n              title=\"Rechercher\"\r\n              icon={FaSearch}\r\n              active={selectedItem === 'Rechercher'}\r\n            />\r\n\r\n            <MenuItem\r\n              setExpanded={setExpanded}\r\n              setselectedItem={setselectedItem}\r\n              title=\"Développeur\"\r\n              icon={BsPeopleCircle}\r\n              active={selectedItem === 'Développeur'}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n        {isMobile && expanded && <div className=\"sidebar-burger-on\" onClick={toggleMenu}></div>}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\nimport './App.scss';\nimport { Route, Switch } from 'react-router-dom';\n\n/**\n * Import local de components\n */\nimport Sidebar from '../Sidebar';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Sidebar />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './styles/reset.scss';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\n// == Render\nconst rootComponent = (\n  <Router basename=\"/likemovie\">\n    <App />\n  </Router>\n);\n\n// Le rendu de React => DOM\nrender(rootComponent, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}